# Conversation Notes

## Adding Parent-Child Relationship in Django Models

### Models

```python
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    ADMIN = "admin"
    PROFESOR = "profesor"
    FATHER = "father"
    STUDENT = "student"

    ROLE_CHOICES = [
        (ADMIN, "Admin"),
        (PROFESOR, "Profesor"),
        (FATHER, "Father"),
        (STUDENT, "Student"),
    ]

    role = models.CharField(max_length=25, choices=ROLE_CHOICES, default=STUDENT)
    phone = models.CharField(max_length=12, blank=True, null=True)
    center = models.CharField(max_length=250, default="Test School")
    unique_code = models.CharField(max_length=8, unique=True)

    def __str__(self):
        return f"{self.username} - {self.role} - {self.center}"

class ParentChild(models.Model):
    parent = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        limit_choices_to={"role": CustomUser.FATHER},
        related_name="children"
    )
    child = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        limit_choices_to={"role": CustomUser.STUDENT},
        related_name="parents"
    )

    def __str__(self):
        return f"{self.parent.username} - {self.child.username}"

class ClassGrupo(models.Model):
    name = models.CharField(max_length=100, default="Grupo A")
    teacher = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        limit_choices_to={"role": CustomUser.PROFESOR},
        related_name="clases",
    )
    students = models.ManyToManyField(
        CustomUser,
        limit_choices_to={"role": CustomUser.STUDENT},
        related_name="clase_student",
    )
    center = models.CharField(max_length=250)

    def __str__(self):
        return f"{self.name} - {self.center}"

Views

from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from .models import ClassGrupo, ParentChild, CustomUser
from .serializers import ClassGrupoSerializer

class ParentClassListView(generics.ListAPIView):
    serializer_class = ClassGrupoSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.role == CustomUser.FATHER:
            children = ParentChild.objects.filter(parent=user).values_list('child', flat=True)
            return ClassGrupo.objects.filter(students__in=children).distinct()
        raise PermissionDenied("You do not have permission to view this resource.")


URLs

from django.urls import path
from .views import ParentClassListView

urlpatterns = [
    path('parent-classes/', ParentClassListView.as_view(), name='parent_classes'),
]

Serializers

from rest_framework import serializers
from .models import ClassGrupo

class ClassGrupoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClassGrupo
        fields = '__all__'